#include "cache.h"

#define PSEL_MAX 1024	// 10 bit PSEL
#define MAX_LRU_POS LLC_WAY
#define BIMODAL_THRESH 6		// 6%

#define N_DEDICATED_SETS 64     // 必须>=2

#define IS_LIP_POS(x) (x % N_DEDICATED_SETS == (N_DEDICATED_SETS - 2))  // LRU set
#define IS_BIP_POS(x) (x % N_DEDICATED_SETS == (N_DEDICATED_SETS - 1))  // BIP set
#define IS_FOLLOWER(x) (x % N_DEDICATED_SETS < (N_DEDICATED_SETS - 2))  // follower set

uint16_t PSEL = 0;  //用来记录LRU-set和BIP-set的miss情况

void CACHE::llc_initialize_replacement()
{
	// Safety checks
	if(N_DEDICATED_SETS < 3){
		cerr << "Number of dedicated sets has to be more than 2\n";
		assert(0);
	}
	else if(LLC_SET % N_DEDICATED_SETS != 0){
		cerr << "The number of dedicated sets must divide the number of sets in the LLC without any errors" << endl;
		cerr << "Currently: LLC_SET=" << LLC_SET << " and N_DEDICATED_SETS=" << N_DEDICATED_SETS << " in replacement/dip.llc_repl" << endl;
		assert(0);
	}

    // 初始化，使用LRU
	for (uint32_t i=0; i<LLC_SET; i++) {
		for (uint32_t j=0; j<LLC_WAY; j++) {
				if(IS_BIP_POS(i))
					block[i][j].lru = MAX_LRU_POS;
				else
					block[i][j].lru = 0;
		}
	}

}

void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    if (hit && (type == WRITEBACK)) // WB不更新LRU位
		return;
	else if(hit){
		if(block[set][way].lru > 0)
			block[set][way].lru--;	// hit情况：promote towards MRU
	}
	// miss的时候更新PSEL
    // 当LRU-set发生一次miss时，PSEL_cnt + 1
    // 当BIP-set发生一次miss时，PSEL_cnt - 1
	else{
		if(IS_LIP_POS(set))
			PSEL = (PSEL+1) % PSEL_MAX; //不会超过PSEL threshold
		else if(IS_BIP_POS(set) && PSEL > 0)
			PSEL--;
	}
}

uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    uint32_t way = 0, new_way = 0;

    // fill invalid line first
    for (way=0; way<LLC_WAY; way++) {
        if (block[set][way].valid == false) {

            DP ( if (warmup_complete[cpu]) {
            cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " invalid set: " << set << " way: " << way;
            cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
            cout << dec << " lru: " << block[set][way].lru << endl; });

            break;
        }
    }

	// 没有空，则LRU
	if(way == LLC_WAY){
        for (way=0; way<LLC_WAY; way++) {
            if (block[set][way].lru > block[set][new_way].lru) {
				new_way = way;
            }
			DP ( if (warmup_complete[cpu]) {
			cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " replace set: " << set << " way: " << new_way;
			cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][new_way].address << " data: " << block[set][new_way].data;
			cout << dec << " lru: " << block[set][new_way].lru << endl; });
		}
	}
	else
		new_way = way;

    if (new_way == LLC_WAY) {
        cerr << "[" << NAME << "] " << __func__ << " no victim! set: " << set << endl;
        assert(0);
    }

	// PSEL比较小时，采用 DIP 策略
	if(IS_LIP_POS(set) || (IS_FOLLOWER(set) && PSEL < ((PSEL_MAX + 1)/2))){
        // LIP MSB是0时表明是follower
		if(block[set][new_way].lru > 0)
			block[set][new_way].lru = 0;
	}
    // PSEL比较大时，表明采用LRU策略会发生的miss量超过BIP，就要用BIP策略
	else if(IS_BIP_POS(set) || (IS_FOLLOWER(set) && PSEL >= ((PSEL_MAX + 1)/2))){
        // 小于这个阈值，依旧采用LRU策略，promoted to MRU position
		if((rand() % 100) <= BIMODAL_THRESH)
			block[set][new_way].lru = 0;
        // 大于阈值时，insert into LRU positions(LIP)
		else if(block[set][new_way].lru > 0)
			block[set][new_way].lru = MAX_LRU_POS;
	}

	return new_way;
}

void CACHE::llc_replacement_final_stats()
{

}
